@model DataGate.Web.ViewModels.TimeSeries.TimeSeriesViewModel

@{
    var dates = @Html.Raw(Json.Serialize(Model.TSPriceDates));
    var providers = @Html.Raw(Json.Serialize(Model.TSTypeProviders));
}

<div>
    <canvas id="canvas-chart-aum"></canvas>
</div>

<script>
     // ________________________________________________________
     //
     // Chart js for Asset under management
    (function () {
        let ctx = document.getElementById('canvas-chart-aum').getContext('2d');
        let chart = new Chart(ctx, setConfigChart(@dates, @providers));

        function setConfigChart(dates, providers) {
            const config = {
                type: 'line',
                data: {
                    labels: dates,
                    datasets: []
                },
                options: {
                    responsive: true,
                    title: {
                        display: true,
                        text: 'Time Series For ShareClass'
                    },
                    tooltips: {
                        mode: 'index',
                        intersect: false,
                    },
                    hover: {
                        mode: 'nearest',
                        intersect: true
                    },
                    scales: {
                        x: {
                            display: true,
                            scaleLabel: {
                                display: true,
                                labelString: 'Month'
                            }
                        },
                        y: {
                            display: true,
                            scaleLabel: {
                                display: true,
                                labelString: 'Value'
                            }
                        }
                    }
                }
            };

            $.each(providers, function (index, provider) {
                const prices = JSON.parse('@Html.Raw(Json.Serialize(Model.TSAllPriceValues))');
                const currentPrice = prices
                    .filter(ts => ts[2] === provider)
                    .map(ts => ts[1]);

                config.data.datasets.push({
                    label: provider,
                    backgroundColor: window.chartColors[index],
                    borderColor: window.chartColors[index],
                    data: currentPrice,
                    fill: false,
                });
            });
            return config;
        }
    })();
</script>