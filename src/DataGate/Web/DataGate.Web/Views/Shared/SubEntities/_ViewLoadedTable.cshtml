@model EntitySubEntitiesViewModel

@{
    var controller = this.ViewContext
        .RouteData
        .Values[GlobalConstants.ControllerRouteDataValue]
        .ToString();

    var targetRoute = StringSwapper.ByController(controller,
                                                 GlobalConstants.SubFundDetailsRouteName,
                                                 GlobalConstants.ShareClassDetailsRouteName,
                                                 string.Empty);

    var targetArea = StringSwapper.ByController(controller,
                                                GlobalConstants.SubFundAreaName,
                                                GlobalConstants.ShareClassAreaName,
                                                string.Empty);

    var subEntitiesRoute = StringSwapper.ByController(controller,
                                                GlobalConstants.FundSubFundsRouteName,
                                                GlobalConstants.SubFundShareClassesRouteName,
                                                string.Empty);
}

<div class="table-responsive border-0 mx-auto">
    <div class="text-center">
        <a class="btn btn-pharus btn-sm"
           asp-route="@subEntitiesRoute"
           asp-route-id="@Model.Id"
           asp-route-date="@Model.Date"
           asp-route-container="@Model.Container">
            @SharedLocalizer["SELECTION"]
        </a>
    </div>
    <div class="table-wrapper-double-scroll">
        <table class="table table-hover table-view-pharus">
            <thead>
                <tr>
                    @for (int row = 0; row < GlobalConstants.RowNumberOfHeadersInTable; row++)
                    {
                        for (int col = 0; col < Model.Entities[row].Length; col++)
                        {
                            <th class="pr-3"
                                title="@Model.Entities[row][col]">
                                @Model.Entities[row][col]
                            </th>
                        }
                    }
                </tr>
            </thead>
            <tbody id="tbody-update-inactive">
                @for (int row = GlobalConstants.RowNumberOfHeadersInTable; row < Model.Entities.Count; row++)
                {
                    var entityId = @Model.Entities[row][GlobalConstants.IndexEntityIdInTable];
                    <tr>
                        @for (int col = 0; col < Model.Entities[row].Length; col++)
                        {
                            if (Model.Entities[0][col].Contains("NAME"))
                            {
                                <td class="p-1 td-name-link">
                                    <a asp-area="@targetArea" asp-route="@targetRoute" asp-route-id="@entityId" asp-route-date="@Model.Date">
                                        @Model.Entities[row][col]
                                    </a>
                                </td>
                            }
                            else
                            {
                                <td class="p-1">
                                    @Model.Entities[row][col]
                                </td>
                            }
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<script>
    // Add inactive class to entities that have inactive status
    (function () {
        const tbody = document.getElementById('tbody-update-inactive');

        if (tbody) {
            const rows = tbody.getElementsByTagName('tr');

            for (var row of rows) {
                const cells = row.getElementsByTagName('td');
                for (var cell of cells) {
                    if (cell.textContent.includes('Inactive')) {
                        row.classList.add('inactive-entity');
                    }
                }
            }
        }
    })();

    // Double top scroll for wide table
    $(function () {
        $('.double-scroll').doubleScroll();
        $('.table-wrapper-double-scroll').doubleScroll({ resetOnWindowResize: true });
    })
</script>